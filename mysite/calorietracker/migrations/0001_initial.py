# Generated by Django 3.1.2 on 2020-10-07 00:36

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django_measurement.models
import measurement.measures.distance
import measurement.measures.mass


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(editable=False, null=True)),
                ('type', models.CharField(blank=True, choices=[('F', 'Free'), ('B', 'Bronze'), ('S', 'Silver'), ('G', 'Gold'), ('P', 'Platinum')], default='Free', max_length=1, null=True)),
                ('expires', models.DateTimeField(blank=True, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Streak',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(editable=False, null=True)),
                ('input_streak', models.IntegerField(default=0)),
                ('defecit_streak', models.IntegerField(default=0)),
                ('surplus_streak', models.IntegerField(default=0)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Setting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(editable=False, null=True)),
                ('age', models.IntegerField(blank=True, null=True)),
                ('sex', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female')], max_length=1, null=True)),
                ('height', django_measurement.models.MeasurementField(blank=True, measurement=measurement.measures.distance.Distance, null=True)),
                ('activity', models.CharField(blank=True, choices=[('1', 'Sedentary (little or no exercise)'), ('2', 'Lightly active (light exercise/sports 1-3 days/week)'), ('3', 'Moderatetely active (moderate exercise/sports 3-5 days/week)'), ('4', 'Very active (hard exercise/sports 6-7 days a week)'), ('5', 'Extra active (very hard exercise/sports & physical job or 2x training)')], help_text='Used to estimate your total daily energy expenditure until we have enough data to calculate it', max_length=1, null=True)),
                ('goal', models.CharField(blank=True, choices=[('L', 'Lose'), ('M', 'Maintain'), ('G', 'Gain')], help_text='Do you want to lose, maintain, or gain weight?', max_length=1, null=True)),
                ('goal_weight', django_measurement.models.MeasurementField(blank=True, measurement=measurement.measures.mass.Mass, null=True)),
                ('goal_date', models.DateTimeField(blank=True, null=True)),
                ('unit_preference', models.CharField(blank=True, choices=[('I', 'Imperial'), ('M', 'Metric')], help_text='Display metric or imperial units on analytics page', max_length=1, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Log',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(editable=False, null=True)),
                ('date', models.DateField(unique=True)),
                ('weight', django_measurement.models.MeasurementField(measurement=measurement.measures.mass.Mass, null=True)),
                ('calories_in', models.IntegerField(help_text='Total calories consumed')),
                ('calories_out', models.IntegerField(blank=True, help_text='If you have a fitness tracker, total calories burned', null=True)),
                ('activity_lvl', models.CharField(blank=True, choices=[('L', 'Low'), ('M', 'Moderate'), ('H', 'High')], help_text='Estimate your relative activity level', max_length=1, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted', models.DateTimeField(editable=False, null=True)),
                ('comment', models.TextField()),
                ('contact_email', models.EmailField(max_length=254)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
